package main;

import java.util.List;
import java.util.ArrayList;

public class Code {
    private static StringBuilder sb = new StringBuilder();

    private static void print(String str) {
        sb.append(str);
    }

    private static void println(String str) {
        sb.append(str + "\n");
    }

    private static void newline() {
        sb.append("\n");
    }

    private static void comment(String str) {
    	println("# " + str);
    }

    private static void separator() {
    	println("# ----------------------");
    }

    public static String code() {
    	// Header
        comment("Generated by: xandri03");
        newline();

        comment("R0 - framepointer");
        comment("R1 - expression result / function return value");
        comment("R2 - ?");
        println("ALIAS FP $0");
        println("SET $0 0");
        println("SET $1 0");
        // println("SET $2 0");
        newline();

        comment("call main, exit afterwards");
        println("CALL [$SP] ::main");
        println("JUMP @exit");
        newline();

        comment("***** GLOBAL FUNCTIONS *****");
        newline();
        SymbolTable.functions().forEach(f -> code(f));
        newline();

        comment("***** CLASSES *****");
        newline();
        println("# TODO");
        newline();
        
        println("LABEL @exit");
        newline();

        // Success
        return sb.toString();
    }

    public static void code(Function f) {
        separator();
        print("LABEL ");
        if(f.context != null) {
            print(f.context.name);
        }
        println("::" + f.name);
        newline();

        comment("Store frame pointer");
        println("SET $FP $SP");
        newline();

        comment("Allocate local variables, they will be initialized at their declaration site");
        println("ADDI $SP $SP " + f.order);
        newline();

        // Generate code for statements
        if(f.body == null) {
        	// Built-in functions
        	println("# TODO");
        } else {

        }
        newline();

        comment("Hard return");
        if(f.type == Type.VOID) {
        } else if(f.type == Type.INT) {
            println("SET $1 0");
        } else if(f.type == Type.STRING) {
            println("SET $1 \"\"");
        } else {
            println("SET $1 0");
        }
        println("SET $SP $FP");
        println("RETURN [$FP]");
        newline();
    }

    public static String push(Literal l) {
        println("ADDI $SP $SP 1");
        println("SET [$SP] " + l.text);
        /*sb.clear();
        sb.append("SET [$SP] ");*/
        return "ADDI [$SP] [$SP-1]";
    }
}